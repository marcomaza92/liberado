// Map to define all the colors you want
$colors: (
  // Chromatic
  black: #000000,
  white: #FFFFFF,
  // Main
  purple: #3D0046,
  yellow: #D97F11,
  turquoise: #168C8C,
  green: #09470B
);

// Shades and Tints

// Trigger
$step: 0;
// $gap * $count must be an integer between 0 and 100
// Both $gap and $count must be integers
$gap: 5;
$count: 5;
// Check if you pay attention to the above conditions
@if $gap * $count >= 0 or $gap * $count <= 100 {
  $gap: $gap;
  $count: $count;
} @else {
  @error 'Out of range: $gap * $count must be an integer between 0 and 100';
}
// Define empty maps for the shades and tints
$shades: ();
$tints: ();
// Function to create shades
@function createShades($color-name, $color-value) {
  $shade: ();
  @for $i from 1 through $count {
    $step: $step + $gap;
    $temp-shade: (
      #{$color-name}-shade-#{$i}: darken($color-value, $step)
    );
    $shade: map-merge($shade, $temp-shade);
  }
  @return $shade;
}
// Function to create tints
@function createTints($color-name, $color-value) {
  $tint: ();
  @for $i from 1 through $count {
    $step: $step + $gap;
    $temp-tint: (
      #{$color-name}-tint-#{$i}: lighten($color-value, $step)
    );
    $tint: map-merge($tint, $temp-tint);
  }
  @return $tint;
}
// Loop to iterate all the colors and call functions
@each $color-name, $color-value in $colors {
  $current-temp-shade: ();
  $current-temp-tint: ();

  $current-shade: createShades($color-name, $color-value);
  $current-temp-shade: (
    #{$color-name}-shades: $current-shade
  );
  $shades: map-merge($shades, $current-temp-shade);

  $current-tint: createTints($color-name, $color-value);
  $current-temp-tint: (
    #{$color-name}-tints: $current-tint
  );
  $tints: map-merge($tints, $current-temp-tint);
}
// Debug your results in the console (uncomment below)
// @debug $shades;
// @debug $tints;
// Use this function to get values recursively inside a map
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

// Fonts

// Usually 1rem = 16px in most of the browsers according to the UA stylesheet. However this can be changed by the user in theirs browsers options.
$base: 1rem;

$fonts: ();
// Below arrays are for you to feel with your needs
$font-names: 'h6', 'h5', 'base', 'h3', 'h2', 'h1';
$font-sizes: 0.75, 0.875, 1, 1.5, 2, 2.5;
// Get the lengths of boths arrays
$font-names-length: length($font-names);
$font-sizes-length: length($font-sizes);
// Check if the length are equal
@if $font-names-length == $font-sizes-length {
  // Loop the map with the font-names length
  @for $i from 1 through $font-names-length {
    $current-name: nth($font-names, $i);
    $current-size: nth($font-sizes, $i);
    $font-temp: (
      font-#{$current-name}: $base * $current-size
    );
    $fonts: map-merge($fonts, $font-temp);
  }
} @else {
  @error 'Lengths from $font-names and $font-sizes are not equal. They must be the same';
}
// Debug your results in the console (uncomment below)
// @debug $fonts;

body {
  // Reset

  padding: 0;
  margin: 0;
  box-sizing: border-box;

  // Typography

  // Name
  * {
    font-family: 'Lato', sans-serif;
  }
  // Sizes
  a {
    text-decoration: none;
    cursor: pointer;
  }
  button {
    width: 96px;
    height: 48px;
    border: 0;
    cursor: pointer;
  }
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    margin: 0;
  }
  h1 {
    font-size: map-get($fonts, font-h1);
  }
  h2 {
    font-size: map-get($fonts, font-h2);
  }
  h3 {
    font-size: map-get($fonts, font-h3);
  }
  h4,
  p,
  a {
    font-size: map-get($fonts, font-base);
  }
  h5 {
    font-size: map-get($fonts, font-h5);
  }
  h6 {
    font-size: map-get($fonts, font-h6);
  }
  // Styles
  .regular {
    font-style: normal;
  }
  .italic {
    font-style: italic;
  }
  .bold {
    font-weight: bold;
  }
  .colors {
    @each $color-name, $color-value in $colors {
      .#{$color-name} {
        @for $i from 1 through 11 {
          @if ($i <= 5) {
            span:nth-of-type(#{$i}) {
              background: map-deep-get($shades, #{$color-name}-shades, #{$color-name}-shade-#{6 - $i});
            }
          }
          @if ($i == 6) {
            span:nth-of-type(6) {
              background: map-get($colors, $color-name);
            }
          }
          @if ($i >= 7) {
            span:nth-of-type(#{$i}) {
              background: map-deep-get($tints, #{$color-name}-tints, #{$color-name}-tint-#{$i - 6});
            }
          }
        }
      }
    }
  }
  .buttons {
    &.primary {
      background: map-get($colors, black);
      color: map-get($colors, white);
      transition: 0.25s all ease-in-out;
      &:hover,
      &:focus {
        background: map-deep-get($tints, black-tints, black-tint-5);
        color: map-get($colors, white);
      }
    }
    &.secondary {
      background: map-get($colors, white);
      color: map-get($colors, black);
      transition: 0.25s all ease-in-out;
      &:hover,
      &:focus {
        background: map-deep-get($shades, white-shades, white-shade-5);
        color: map-get($colors, black);
      }
    }
  }
  .links {
    &.primary {
      color: map-get($colors, black);
      transition: 0.25s all ease-in-out;
      &:hover,
      &:focus {
        color: map-deep-get($tints, black-tints, black-tint-5);
      }
      &:visited {
        color: map-deep-get($shades, turquoise-shades, turquoise-shade-1);
      }
    }
    &.secondary {
      color: map-get($colors, white);
      transition: 0.25s all ease-in-out;
      &:hover,
      &:focus {
        color: map-deep-get($shades, white-shades, white-shade-5);
      }
      &:visited {
        color: map-deep-get($tints, turquoise-tints, turquoise-tint-1);
      }
    }
  }
  img {
    width: 100%;
    height: 100%;
  }
  header {
    padding: 2rem 0;
    background: map-get($colors, black);
    * {
      color: map-get($colors, white);
    }
    h1 {
      float: left;
      width: calc(70% - 20px);
      margin-left: 20px;
    }
    #menu-open {
      display: inline-block;
      width: calc(30% - 20px);
      margin-right: 20px;
      text-align: right;
      font-size: map-get($fonts, font-h1);
    }
    nav {
      clear: both;
    }
    nav.close {
      display: none;
    }
  }
  #about {
    margin: 40px 0 20px 0;
    * {
      margin-left: 20px;
      margin-right: 20px;
    }
  }
  #work {
    background: map-deep-get($shades, white-shades, white-shade-2);
    padding: 40px 0;
    margin: 20px 0 20px 0;
    & > * {
      img {
        margin: 20px 0;
      }
      a {
        display: block;
        width: 100%;
        text-align: right;
      }
      margin-left: 20px;
      margin-right: 20px;
    }
  }
}
